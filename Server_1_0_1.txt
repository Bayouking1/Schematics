{"slots":{"0":{"name":"db1","type":{"events":[],"methods":[]}},"1":{"name":"db2","type":{"events":[],"methods":[]}},"2":{"name":"db3","type":{"events":[],"methods":[]}},"3":{"name":"db4","type":{"events":[],"methods":[]}},"4":{"name":"db5","type":{"events":[],"methods":[]}},"5":{"name":"db6","type":{"events":[],"methods":[]}},"6":{"name":"db7","type":{"events":[],"methods":[]}},"7":{"name":"db8","type":{"events":[],"methods":[]}},"8":{"name":"menudb","type":{"events":[],"methods":[]}},"9":{"name":"commsdb","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"json = require('dkjson')\nversion = \"1_0_1\"\n\ndatabankList={}\nrecipeIndexList={}\ncachedCost={}\n\nfunction getRecipe( recipeName)\n    for i=1,#databankList do\n        recipe = databankList[i].getStringValue(recipeName)\n        if recipe and not( recipe == \"\") then\n            --system.print(\"DB: \"..i..\" Recipe: \"..recipe)\n            return recipe\n        end\n    end\n    --system.print(\"Recipe: \".. recipeName..\" Not Found\")\n    return \"\"\nend\n\nfunction printRecipe( recipe )\n    --system.print(\"Recipe:: \"..recipe)\nend\n\nfunction linkDatabank()\n    for slot_name, slot in pairs(unit) do\n        --system.print(\"Name = \"..slot_name)\n        if type(slot) == \"table\" and type(slot.export) == \"table\" and\n            slot.getElementClass then\n            if not(slot_name == \"menudb\") and not(slot_name == \"commsdb\")then      \n                if slot.getElementClass():lower():find(\"databankunit\") then  \n                    --system.print(\"Name = \"..slot_name)\n                    databankList[#databankList+1] = slot\n                end\n            end\n        end\n    end\nend\n\nfunction newOreAmount()\n\n    local ore={}\n\n    ore.amount={}\n    ore.amount[\"Bauxite\"]=0\n    ore.amount[\"Coal\"]=0\n    ore.amount[\"Quartz\"]=0\n    ore.amount[\"Hematite\"]=0\n    ore.amount[\"Chromite\"]=0\n    ore.amount[\"Malachite\"]=0\n    ore.amount[\"Limestone\"]=0\n    ore.amount[\"Natron\"]=0\n    ore.amount[\"Petalite\"]=0\n    ore.amount[\"Garnierite\"]=0\n    ore.amount[\"Acanthite\"]=0\n    ore.amount[\"Pyrite\"]=0\n    ore.amount[\"Cobaltite\"]=0\n    ore.amount[\"Cryolite\"]=0\n    ore.amount[\"Kolbeckite\"]=0\n    ore.amount[\"Gold Nuggets\"]=0\n    ore.amount[\"Rhodonite\"]=0\n    ore.amount[\"Columbite\"]=0\n    ore.amount[\"Illmenite\"]=0\n    ore.amount[\"Vanadinite\"]=0\n    ore.amount[\"O2P\"]=0\n    ore.amount[\"HP\"]=0\n    return ore\nend\n\nfunction addOreAmount(ore1, ore2)\n    local ore={}\n    ore.amount={}\n    for i,v in pairs(ore1.amount) do\n        --system.print(\"Adding: \"..i..\"(\"..ore1.amount[i]..\"+\"..ore2.amount[i]..\")\")\n        ore.amount[i]=ore1.amount[i]+ore2.amount[i]\n        --system.print(\"=\"..ore.amount[i])\n    end\n    return ore\nend\n\nfunction multiplyOreAmount(ore1, factor)\n    local ore={}\n    ore.amount={}\n    for i,v in pairs(ore1.amount) do\n        --system.print(\"Multi: \"..i..\"(\"..ore1.amount[i]..\"*\"..factor..\")\")\n        ore.amount[i]=ore1.amount[i]*factor\n        --system.print(\"=\"..ore.amount[i])\n    end\n    return ore\nend     \n\ncacheIndex={}\nfunction cacheRecipeCost(recipeName,cost)\n    cachedCost[recipeName]=cost\n    cacheIndex[#cacheIndex+1]=recipeName\nend\n\nfunction calculateCost(recipe)\n    local ingredRecipe = \"\"\n    local ore = newOreAmount()\n    local ingCost = newOreAmount()\n    local i = \"\"\n    local v = 0\n\n    if recipe and not( recipe.tp==\"Ore\" or recipe.nm == \"O2P\" or recipe.nm == \"HP\") then\n        for i,v in pairs(recipe.ip) do\n            \n            --local cCost = cachedCost[i]\n            --system.print(\"i= \".. i..\"(\"..v..\")\")\n            if cachedCost[i] and not(cachedCost[i]==nil) and not(cachedCost[i]==\"\") then   \n                ingCost = cachedCost[i]\n                --system.print(\"1.0:\"..json.encode(ingCost))\n            else\n                ingredRecipe = json.decode(getRecipe(i))\n                if ingredRecipe.tp == \"Ore\" or i == \"O2P\" or i == \"HP\" then\n                    ingCost.amount[i]=1\n                    --system.print(\"1.1:\"..json.encode(ingCost))\n                else         \n                    ingCost = calculateCost(ingredRecipe)\n                    --system.print(\"1.2:\"..json.encode(ingCost))\n                end\n                --system.print(\"i= \".. i..\"(\"..v..\")\")\n                cacheRecipeCost(i,ingCost)\n            end\n            --system.print(\"1: \"..json.encode(ingCost))\n            local ingredOre = multiplyOreAmount(ingCost,(v/recipe.op))\n            ore = addOreAmount(ore,ingredOre)\n        end\n    else \n        ore.amount[recipe.nm] = ore.amount[recipe.nm] + recipe.op\n    end \n    collectgarbage(\"collect\")\n    --system.print(\"Cost: \"..json.encode(ore))\n    return ore\nend\n\nlinkDatabank()\n--buildRecipeList()\n\ncommsdb.setStringValue(\"Req\",\"\")\ncommsdb.setStringValue(\"Res\",\"\")\ncommsdb.setStringValue(\"Cost\",\"\")\n\ncacheList={}\ncacheList[#cacheList+1]=\"AlP\"\ncacheList[#cacheList+1]=\"SiP\"\ncacheList[#cacheList+1]=\"CP\"\ncacheList[#cacheList+1]=\"FeP\"\ncacheList[#cacheList+1]=\"CaP\"\ncacheList[#cacheList+1]=\"NaP\"\ncacheList[#cacheList+1]=\"ChP\"\ncacheList[#cacheList+1]=\"CuP\"\ncacheList[#cacheList+1]=\"LiP\"\ncacheList[#cacheList+1]=\"NiP\"\ncacheList[#cacheList+1]=\"AgP\"\ncacheList[#cacheList+1]=\"SP\"\ncacheList[#cacheList+1]=\"CoP\"\n--cacheList[#cacheList+1]=\"FlP\"\n--cacheList[#cacheList+1]=\"AuP\"\n--cacheList[#cacheList+1]=\"ScP\"\n--cacheList[#cacheList+1]=\"MnP\"\n--cacheList[#cacheList+1]=\"NbP\"\n--cacheList[#cacheList+1]=\"TiP\"\n--cacheList[#cacheList+1]=\"VaP\"\ncacheList[#cacheList+1]=\"Al-Fe Aly\"\ncacheList[#cacheList+1]=\"CaCu\"\ncacheList[#cacheList+1]=\"Sil\"\ncacheList[#cacheList+1]=\"Dur\"\ncacheList[#cacheList+1]=\"Ant S\"\ncacheList[#cacheList+1]=\"Table\"\ncacheList[#cacheList+1]=\"Adv StdF S\"\ncacheList[#cacheList+1]=\"Bsc GasC M\"\ncacheList[#cacheList+1]=\"Space Core M\"\ncacheCount=0\n\nsystem.print(\"Version: \"..version)\nsystem.print(\"Initialising Cache\")\n\nunit.hide()\nunit.setTimer(\"cache\",0.5)\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"local request = commsdb.getStringValue(\"Req\")\ncommsdb.setStringValue(\"Req\",\"\")\ncommsdb.setStringValue(\"oreCost\",\"\")\nlocal Cost = {}\nlocal Stat\n\nif not(request == \"\") then\n    local recipe = getRecipe( request )\n--    system.print(\"Request\"..request)\n--    system.print(\"Recipe\"..recipe)\n    if not( recipe == nil ) and not( recipe == \"\" ) then\n        commsdb.setStringValue(\"Res\",recipe)\n--        system.print(\"CalCost Start\"..recipe)\n        Cost =  calculateCost(json.decode(recipe))\n         \n        commsdb.setStringValue(\"oreCost\",json.encode(Cost))\n--        system.print(\"CalCost End\"..json.encode(Cost))\n    end\nend\n\n--system.print(\"Chache Index = \"..#cacheIndex)\n","filter":{"args":[{"value":"readReq"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"cacheCount = cacheCount + 1\n    \nif cacheCount > #cacheList then\n    unit.setTimer(\"readReq\",2)\n    unit.stopTimer(\"cache\")\n    system.print(\"Initialising Complete\")\nend\n\nlocal recipe = getRecipe( cacheList[cacheCount] )\nif recipe then calculateCost(json.decode(recipe)) end\n\n\n    \n    ","filter":{"args":[{"value":"cache"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"}],"methods":[],"events":[]}
